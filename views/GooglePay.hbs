<head>
  <div class="topnav">
    <a href="/">Create a Transaction</a>
    <a href="/ApplePay">Create an Apple Pay Transaction</a>
    <a class="active" href="/GooglePay">Create a Google Pay Transaction</a>
    <a href="/3D-Secure">Create a 3D Secure Transaction</a>
    <a href="/recent-transactions">Transaction Search</a>
    <b class = "nobutton">Happy Halloween!</b>
  </div>
</head>

<body class = "googlePayStyle">
  <div id="googlePayDiv" style="display:none;">
    <form id="googlePayForm" action="/google-pay-transaction-with-nonce" method="post">

      <div class="container">
        <h1 class="display-4" style="color: #E66C2C;">Thanks for choosing our business today!</h1>
        <p class="lead subtitle" style="color: #E66C2C;">We hope you had a spooky time. Thanks for choosing Google Pay.</p>
      </div>

      <div class="form-row justify-content-md-center">
        <div class = "col-md-2 mb-3">
          <label class = "labelStyle" for="saveCardCheck">Save your card for future use?</label>
          <input class="form-control inputClass" type="checkbox" id="saveCardCheck" name="SaveCard" value="Save">
        </div>
        <div class = "col-md-2 mb-3">
          <label class = "GPlabelStyle" for="Amount">Amount</label>
          <input class="form-control GPinputClass" name="amount" id="amount" placeholder="99.99" required>
        </div>
      </div>
					
      <div style = "text-align:center">
        <div>
          <p class="lead subtitle" style="color: #E66C2C;">Press the Google Pay button below to complete payment!</p>
          <!-- Creating a container for the Google Pay button that is generated later, also setting it's size. -->
          <div id="googlePayButtonContainer" style="width: 800px; height: 100px; margin: auto;"></div>
        </div>

        <!-- Hidden input for the nonce. -->
        <div>
          <input id='gp-payment-method-nonce' name = 'GPPaymentMethodNonce' type='hidden' />
        </div>

        <!-- Hidden input for the payment data, to send address info to the server. -->
        <div>
          <input id='gp-payment-data' name = 'GPPaymentData' type='hidden' />
        </div>
      </div>

    </form>
  </div>

</body>

<script>
var form = document.querySelector('#googlePayForm');
var submit = document.querySelector('input[type="submit"]');
var clientToken = '{{{clientToken}}}';
var theGPNonce = document.querySelector('#gp-payment-method-nonce');
var GPPaymentData = document.querySelector('#gp-payment-data');

console.log("Client token in Google Pay: " + clientToken);

// Form validation to check that the amount inputted is valid and to direct traffic to the nonce or token flow.
function inputValidation() {
  let amountInputted = document.forms["googlePayForm"]["amount"].value;
  let saveCardCheckboxBool = document.forms["googlePayForm"]["saveCardCheck"].checked;

    // Giving the customer the option to save their card or not. If checked, the form is sent to the usual /transaction location. If not, changing the destination of the form to a POST that just uses the nonce in a sale call directly.
  if (saveCardCheckboxBool == false) {
    // The box is not checked, the customer doesn't want their card saved, submit the form to a checkout that just uses the nonce in a sale call.
    console.log("nope, it's not checked");
    document.forms["googlePayForm"].action = "/google-pay-transaction-with-nonce";
  } else {
    // The box is checked, customer wants their card saved, submit the form to our original function which creates a token, then a txn from that token.
    console.log("yep, it's checked")
    document.forms["googlePayForm"].action = "/google-pay-transaction-with-token";
  }

  let formDestination = document.forms["googlePayForm"].action;
  console.log("Form action: " + formDestination);

  // Making sure the input is actually a number. The second condition is somewat redundant because the field is required, but just in case.
  if (isNaN(amountInputted) || amountInputted == "") {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a number.");
    return false;
  }
  // Making sure the number is positive and not 0.
  else if (((Number(amountInputted) * -1) > 0) || (Number(amountInputted) * Number(amountInputted) == 0)) {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a positive number.");
    return false;
  }
  else {
    return true;
  }
}

braintree.client.create({
  authorization: clientToken
}, function (clientErr, clientInstance) {
  if (clientErr) {
    console.error('Error creating client:', clientErr);
    return;
  }
else {
  // Creating the Google Pay client from Google
  var paymentsClient = new google.payments.api.PaymentsClient({
  environment: 'TEST' // Or 'PRODUCTION'
  });

  braintree.googlePayment.create({
  client: clientInstance, // From braintree.client.create, see below for full example
  googlePayVersion: 2
  // googleMerchantId: 'merchant-id-from-google' // Optional in sandbox; if set in sandbox, this value must be a valid production Google Merchant ID
  }, function (err, googlePaymentInstance) {
    if (err) {
      console.error(err);
    }

    // Setting up Google Pay button with Google's API
    const GPcontainer = document.getElementById('googlePayButtonContainer');
    const button = paymentsClient.createButton({
      buttonColor: 'black',
      buttonType: 'checkout',
      buttonLocale: 'it',
      buttonSizeMode: 'fill',
      onClick: () => {},
      allowedPaymentMethods: [] // use the same payment methods as for the loadPaymentData() API call
    });
    // Adding the Google Pay button we generated to the container above.
    GPcontainer.appendChild(button);

    // Everything was instantiated properly, revealing the form now.
    document.getElementById("googlePayDiv").style.display = "inline";

    console.log("This is what this is making: ", googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods);

    // This function checks that the users browser supports Google Pay.
    // If the browser supports Google Pay, isReadyToPay returns true - https://developers.google.com/pay/api/web/reference/client#isReadyToPay
    paymentsClient.isReadyToPay({
        // see https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest for all options
        apiVersion: 2,
        apiVersionMinor: 0,
        // This loads an allowedPaymentMethods object using information from the Braintree gateway, it's part of BT's Google Pay integration.
        allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods,
        existingPaymentMethodRequired: true
    }).then(function (isReadyToPay) {
      // Browser supports Google Pay, setting everything up from here.
      if (isReadyToPay.result) {

        // Event listener waiting for the above button to be clicked.
        button.addEventListener("click", function(event) {
        event.preventDefault();

        // Checking that the input from the form is set, also directing traffic based on the save card checkbox.
        var inputChecker = inputValidation();
        console.log("Input verified value: " + inputChecker);

        // inputValidation() will return false if the amount value is bad, just returning and ending this there if so.
        if (inputChecker == false) {
          return;
        }
        // The function returned true, moving forward with tokenization!
        else {

          var amountFromForm = document.forms["googlePayForm"]["amount"].value;

          // Creating the configuration for the eventual loadPaymentData call which will ultimately create the nonce.
          // Essentially just setting the parameters for the transaction. 
          var paymentDataRequest = googlePaymentInstance.createPaymentDataRequest(
            { 
              merchantInfo: {
                merchantName: "Gardensound Inc.",
              },
              transactionInfo: {
                currencyCode: "USD",
                totalPriceStatus: "FINAL",
                totalPrice: amountFromForm
              },
              emailRequired: true,
              shippingAddressRequired: true,
              shippingAddressParameters: {
                phoneNumberRequired: true
              }
            }
          );

          // Determining what's required from the customer.
          // See all available options at https://developers.google.com/pay/api/web/reference/object
          var cardPaymentMethod = paymentDataRequest.allowedPaymentMethods[0];
          cardPaymentMethod.parameters.billingAddressRequired = true;
          cardPaymentMethod.parameters.billingAddressParameters = {
            format: "FULL",
            phoneNumberRequired: false
          };

          paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {
            googlePaymentInstance.parseResponse(paymentData, function (err,result) {
              if (err) {
                console.error(err);
              }
              console.log("loadPaymentData Response:", paymentData);
              console.log("parseResponse Response:", result);
              console.log("Google Pay nonce: " + result.nonce);

              // Adding the payment data to the hidden input field to use the address info in the server.
              // Also encoding it using JSON.stringify to make sure that it remains an object in the server.
              GPPaymentData.value = JSON.stringify(paymentData);

              // Adding the nonce to the hidden nonce field in the form, then submitting it.
              theGPNonce.value = result.nonce;
              form.submit();
            });
          }).catch(function (err) {
            // Handle errors
            console.error(err);
            });
          }
        });
      }
    });
  });
  }
});
</script>