<head>
</head>

<body class = "googlePayStyle">
  <div id="googlePayDiv" style="display:none;">
    <form id="googlePayForm" action="/google-pay-transaction-with-nonce" method="post">

      <div class="container">
        <h1 class="display-4" style="color: #E66C2C;">Thanks for choosing our business today!</h1>
        <p class="lead subtitle" style="color: #E66C2C;">We hope you had a spooky time. Thanks for choosing Google Pay.</p>
      </div>

      <div class="form-row justify-content-md-center">
        <div class = "col-md-2 mb-3">
          <label class = "GPlabelStyle" for="saveCardCheck">Save your card for future use?</label>
          <input class="form-control inputClass" type="checkbox" id="saveCardCheck" name="SaveCard" value="Save">
        </div>
        <div class = "col-md-2 mb-3">
          <label class = "GPlabelStyle" for="Amount">Amount</label>
          <input class="form-control GPinputClass" name="amount" id="amount" placeholder="99.99" required>
        </div>
        <div class = "col-md-2 mb-3">
          <label class = "GPlabelStyle" for="3DSCardCheck">Create a 3D Secure authenticated transaction?</label>
          <input class="form-control inputClass" type="checkbox" id="3DSCardCheck" name="threeDScheckbox" value="false">
        </div>
      </div>
					
      <div style = "text-align:center">
        <div>
          <p class="lead subtitle" style="color: #E66C2C;">Press the Google Pay button below to complete payment!</p>
          <!-- Creating a container for the Google Pay button that is generated later, also setting it's size. -->
          <div id="googlePayButtonContainer" style="width: 800px; height: 100px; margin: auto;"></div>
        </div>

        <!-- Hidden input for the nonce. -->
        <div>
          <input id='gp-payment-method-nonce' name = 'GPPaymentMethodNonce' type='hidden' />
        </div>

        <!-- Hidden input for the payment data, to send address info to the server. -->
        <div>
          <input id='gp-payment-data' name = 'GPPaymentData' type='hidden' />
        </div>

        <!-- Hidden input for device data. -->
        <div>
          <input id='device-data-string' name= 'DeviceDataString' type='hidden' />
        </div>
      </div>

    </form>
  </div>

</body>

<script>
var form = document.querySelector('#googlePayForm');
var submit = document.querySelector('input[type="submit"]');
var clientToken = '{{{clientToken}}}';
var theGPNonce = document.querySelector('#gp-payment-method-nonce');
var GPPaymentData = document.querySelector('#gp-payment-data');
var deviceDataString = document.querySelector('#device-data-string');
var socket = io();

console.log("Client token in Google Pay: " + clientToken);

// Form validation to check that the amount inputted is valid and to direct traffic to the nonce or token flow.
function inputValidation() {
  let amountInputted = document.forms["googlePayForm"]["amount"].value;
  let saveCardCheckboxBool = document.forms["googlePayForm"]["saveCardCheck"].checked;
  let threeDSCheckbox = document.forms["googlePayForm"]["threeDScheckbox"];

    // Giving the customer the option to save their card or not. If checked, the form is sent to the usual /transaction location. If not, changing the destination of the form to a POST that just uses the nonce in a sale call directly.
  if (saveCardCheckboxBool == false) {
    // The box is not checked, the customer doesn't want their card saved, submit the form to a checkout that just uses the nonce in a sale call.
    console.log("nope, it's not checked");
    document.forms["googlePayForm"].action = "/google-pay-transaction-with-nonce";
  } else {
    // The box is checked, customer wants their card saved, submit the form to our original function which creates a token, then a txn from that token.
    console.log("yep, it's checked")
    document.forms["googlePayForm"].action = "/google-pay-transaction-with-token";
  }

  // If 3DS is checked, we assign it a value of "true". Will use this in the token flow to determine if we need to generate a new 3DS nonce or not.
  if (threeDSCheckbox.checked == true) {
    threeDSCheckbox.value = "true";
  }

  let formDestination = document.forms["googlePayForm"].action;
  console.log("Form action: " + formDestination);

  // Making sure the input is actually a number. The second condition is somewat redundant because the field is required, but just in case.
  if (isNaN(amountInputted) || amountInputted == "") {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a number.");
    return false;
  }
  // Making sure the number is positive and not 0.
  else if (((Number(amountInputted) * -1) > 0) || (Number(amountInputted) * Number(amountInputted) == 0)) {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a positive number.");
    return false;
  }
  else {
    return true;
  }
}

braintree.client.create({
  authorization: clientToken
}, function (clientErr, clientInstance) {
  if (clientErr) {
    console.error('Error creating client:', clientErr);
    return;
  }
else {
  // Creating the Google Pay client from Google
  var paymentsClient = new google.payments.api.PaymentsClient({
  environment: 'TEST' // Or 'PRODUCTION'
  });

  braintree.googlePayment.create({
  client: clientInstance, // From braintree.client.create, see below for full example
  googlePayVersion: 2
  // googleMerchantId: 'merchant-id-from-google' // Optional in sandbox; if set in sandbox, this value must be a valid production Google Merchant ID
  }, function (err, googlePaymentInstance) {
    if (err) {
      console.error(err);
    }

    // Creating the data collector instance to pass device data into Google Pay txns.
    braintree.dataCollector.create({
      client: clientInstance
    }, function (err, dataCollectorInstance) {
      if (err) {
        // Handle error in creation of data collector
        console.error(err);
        return;
      }
      // At this point, you should access the dataCollectorInstance.deviceData value and provide it
      // to your server, e.g. by injecting it into your form as a hidden input.
      var deviceData = dataCollectorInstance.deviceData;
      console.log(deviceData);
      deviceDataString.value = deviceData;
    });

    // Creaating the 3D Secure instance to run a 3DS authenticated Google Pay txn.
    braintree.threeDSecure.create({
      version: 2, // Will use 3DS2 whenever possible
      client: clientInstance
    }, function (threeDSecureErr, threeDSecureInstance) {
      if (threeDSecureErr) {
      // Handle error in 3D Secure component creation
      return;
      }
      threeDSecure = threeDSecureInstance;
    });

    // Setting up Google Pay button with Google's API
    const GPcontainer = document.getElementById('googlePayButtonContainer');
    const button = paymentsClient.createButton({
      buttonColor: 'black',
      buttonType: 'checkout',
      buttonLocale: 'en',
      buttonSizeMode: 'fill',
      onClick: () => {},
      allowedPaymentMethods: []
    });
    // Adding the Google Pay button we generated to the container above.
    GPcontainer.appendChild(button);

    // Everything was instantiated properly, revealing the form now.
    document.getElementById("googlePayDiv").style.display = "inline";

    console.log("This is what this is making: ", googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods);

    // This function checks that the users browser supports Google Pay.
    // If the browser supports Google Pay, isReadyToPay returns true - https://developers.google.com/pay/api/web/reference/client#isReadyToPay
    paymentsClient.isReadyToPay({
        // see https://developers.google.com/pay/api/web/reference/object#IsReadyToPayRequest for all options
        apiVersion: 2,
        apiVersionMinor: 0,
        // This loads an allowedPaymentMethods object using information from the Braintree gateway, it's part of BT's Google Pay integration.
        allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods,
        existingPaymentMethodRequired: true
    }).then(function (isReadyToPay) {
      // Browser supports Google Pay, setting everything up from here.
      if (isReadyToPay.result) {

        // Event listener waiting for the above button to be clicked.
        button.addEventListener("click", function(event) {
        event.preventDefault();

        // Checking that the input from the form is set, also directing traffic based on the save card checkbox.
        var inputChecker = inputValidation();
        console.log("Input verified value: " + inputChecker);

        // inputValidation() will return false if the amount value is bad, just returning and ending this there if so.
        if (inputChecker == false) {
          return;
        }
        // The function returned true, moving forward with tokenization!
        else {

          var amountFromForm = document.forms["googlePayForm"]["amount"].value;

          // Creating the configuration for the eventual loadPaymentData call which will ultimately create the nonce.
          // Essentially just setting the parameters for the transaction. 
          var paymentDataRequest = googlePaymentInstance.createPaymentDataRequest(
            { 
              merchantInfo: {
                merchantName: "Gardensound Inc.",
              },
              transactionInfo: {
                currencyCode: "USD",
                totalPriceStatus: "FINAL",
                totalPrice: amountFromForm
              },
              emailRequired: true,
              shippingAddressRequired: true,
              shippingAddressParameters: {
                phoneNumberRequired: true
              }
            }
          );

          // Determining what's required from the customer.
          // See all available options at https://developers.google.com/pay/api/web/reference/object
          var cardPaymentMethod = paymentDataRequest.allowedPaymentMethods[0];
          cardPaymentMethod.parameters.billingAddressRequired = true;
          cardPaymentMethod.parameters.billingAddressParameters = {
            format: "FULL",
            phoneNumberRequired: false
          };

          paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {
            googlePaymentInstance.parseResponse(paymentData, function (err,result) {
              if (err) {
                console.error(err);
              }
              console.log("loadPaymentData Response:", paymentData);
              console.log("parseResponse Response:", result);
              console.log("Google Pay nonce: " + result.nonce);
              console.log("Result of isNetworkTokenized: " + result.details.isNetworkTokenized);

              // Adding the payment data to the hidden input field to use the address info in the server.
              // Also encoding it using JSON.stringify to make sure that it remains an object in the server.
              GPPaymentData.value = JSON.stringify(paymentData);

              // As these things, 3DS will be run twice if the customer wants to create a 3DS txn and vault the card.
              // Gonna use vaultChecker to make it so that 3DS is only used on the txn nonce (the one returned from the pm.create() call).
              var vaultChecker = document.forms["googlePayForm"]["saveCardCheck"].checked;
              var threeDSChecker = document.forms["googlePayForm"]["3DSCardCheck"].checked;
              console.log("Save card box checked: " + vaultChecker);
              console.log("3DS box checked: " + threeDSChecker);

              console.log("Email from paymentData: " + paymentData.email);
              console.log("Address from paymentData: " + paymentData.paymentMethodData.info.billingAddress.address1);

              // If the 3DS box is checked, we send the nonce into a verifyCard() call to create a 3DS transaction.
              // Throwing in the second condition here to avoid running 3DS twice^.
              if ((threeDSChecker == true) && (vaultChecker == false)) {
                // Checking whether or not the Google Pay card is network tokenized. 3DS only eligible for non-NT GP cards.
                if (result.details.isNetworkTokenized == false) {
                  threeDSecure.on('lookup-complete', function (data, next) {
                    next();
                  });

                  threeDSecure.verifyCard({
                    nonce: result.nonce,
                    bin: result.details.bin,
                    amount: document.forms["googlePayForm"]["amount"].value,
                    email: paymentData.email,
                    challengeRequested: true,
                    billingAddress: {
                      givenName: (paymentData.paymentMethodData.info.billingAddress.name).substring(0, paymentData.paymentMethodData.info.billingAddress.name.indexOf(' ')),
                      surname: (paymentData.paymentMethodData.info.billingAddress.name).substring(paymentData.paymentMethodData.info.billingAddress.name.indexOf(' ') + 1),
                      phoneNumber: "248-434-5508",
                      streetAddress: paymentData.paymentMethodData.info.billingAddress.address1,
                      extendedAddress: paymentData.paymentMethodData.info.billingAddress.address2,
                      locality: paymentData.paymentMethodData.info.billingAddress.locality,
                      region: paymentData.paymentMethodData.info.billingAddress.administrativeArea,
                      postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,
                      countryCodeAlpha2: paymentData.paymentMethodData.info.billingAddress.countryCode
                    },
                    additionalInformation: {
                      workPhoneNumber: "248-434-5508",
                      shippingGivenName: (paymentData.shippingAddress.name).substring(0, paymentData.shippingAddress.name.indexOf(' ')),
                      shippingSurname: (paymentData.shippingAddress.name).substring(paymentData.shippingAddress.name.indexOf(' ') + 1),
                      shippingAddress: {
                        streetAddress: paymentData.shippingAddress.address1,
                        extendedAddress: paymentData.shippingAddress.address2,
                        locality: paymentData.shippingAddress.locality,
                        region: paymentData.shippingAddress.administrativeArea,
                        postalCode: paymentData.shippingAddress.postalCode,
                        countryCodeAlpha2: paymentData.shippingAddress.countryCode
                      },
                      shippingPhone: "248-434-5508",
                      // Throwing these in for fun/to see what happens. Nothing really, they showed up in the nonce creation call and that's all!
                      shippingMethod: "03",
                      shippingMethodIndicator: "01",
                      productCode: "GEN"
                    },
                    // Collecting 3DS device data as well.
                    collectDeviceData: true
                  }, function (verifyError, payload) {
                    if (verifyError) {
                      console.error(verifyError);
                    }
                    else {
                      console.log("3DS nonce on client: " + payload.nonce);
                      console.log("Liability shift status: " + payload.liabilityShifted);
                      console.log("Liability shift possible status: " + payload.liabilityShiftPossible);

                      // Doing some liability shift checking. If liability is shifted, submit the form. Else, try again with a different card.
                      // Liability has shifted
                      if (payload.liabilityShifted) {
                        console.log("Liability shift flow triggered")
                        theGPNonce.value = payload.nonce;
                        // Submitting the form here on this checkout to allow the form validation to run before the amount is passed in the verifyCard call.
                        form.submit()
                      }
                      // Liability might have shifted, just gonna submit this one too anyway.
                      else if (payload.liabilityShiftPossible) {
                        console.log("Liability shift possible flow triggered")
                        theGPNonce.value = payload.nonce;
                        form.submit()
                      }
                      // No liability shift. Use another card!
                      else {
                        console.log("No liability shift & no liability shift possible flow triggered")
                        alert("Card not able to be authenticated with 3D Secure - please use a different card.");
                        return false;
                      }
                    }
                  });
                }
                // Google Pay card was network tokenized and therefore not eligible for 3DS.
                else {
                  alert("Card not eligible for 3DS. Please use a non-network tokenized Google Pay card for 3DS!");
                  return;
                }
              }
              // 3DS box unchecked, just submitting the original Google Pay nonce to the server.
              // Or, the customer wants to vault + use 3DS. So sending the nonce over to the server to vault right away.
              // Then the server will send back a new nonce to be used in the verifyCard() call in socket.io event handler below.
              else {
                // Adding the nonce to the hidden nonce field in the form, then submitting it.
                theGPNonce.value = result.nonce;
                form.submit();
              }
            });
          }).catch(function (err) {
            // Handle errors
            console.error(err);
            });
          }
          socket.on('nonce-send', (nonce, bin) => {
            console.log("Nonce from paymentMethodNonce.create() in server: " + nonce);
            console.log("BIN from paymentMethodNonce.create() in server: " + bin);

            // The paymentData object was stored in the form earlier, so I'm retrieving it here now to be used in this verifyCard call.
            const GPPaymentDataFromForm = JSON.parse(GPPaymentData.value);
            // Checking that it's parsing correctly (it is).
            console.log("Address from form: " + GPPaymentDataFromForm.paymentMethodData.info.billingAddress.address1);

            threeDSecure.on('lookup-complete', function (data, next) {
              next();
            });

            threeDSecure.verifyCard({
              nonce: nonce,
              bin: bin,
              amount: document.forms["googlePayForm"]["amount"].value,
              email: GPPaymentDataFromForm.email,
              challengeRequested: true,
              billingAddress: {
                givenName: (GPPaymentDataFromForm.paymentMethodData.info.billingAddress.name).substring(0, GPPaymentDataFromForm.paymentMethodData.info.billingAddress.name.indexOf(' ')),
                surname: (GPPaymentDataFromForm.paymentMethodData.info.billingAddress.name).substring(GPPaymentDataFromForm.paymentMethodData.info.billingAddress.name.indexOf(' ') + 1),
                phoneNumber: "248-434-5508",
                streetAddress: GPPaymentDataFromForm.paymentMethodData.info.billingAddress.address1,
                extendedAddress: GPPaymentDataFromForm.paymentMethodData.info.billingAddress.address2,
                locality: GPPaymentDataFromForm.paymentMethodData.info.billingAddress.locality,
                region: GPPaymentDataFromForm.paymentMethodData.info.billingAddress.administrativeArea,
                postalCode: GPPaymentDataFromForm.paymentMethodData.info.billingAddress.postalCode,
                countryCodeAlpha2: GPPaymentDataFromForm.paymentMethodData.info.billingAddress.countryCode
              },
              additionalInformation: {
                workPhoneNumber: "248-434-5508",
                shippingGivenName: (GPPaymentDataFromForm.shippingAddress.name).substring(0, GPPaymentDataFromForm.shippingAddress.name.indexOf(' ')),
                shippingSurname: (GPPaymentDataFromForm.shippingAddress.name).substring(GPPaymentDataFromForm.shippingAddress.name.indexOf(' ') + 1),
                shippingAddress: {
                  streetAddress: GPPaymentDataFromForm.shippingAddress.address1,
                  extendedAddress: GPPaymentDataFromForm.shippingAddress.address2,
                  locality: GPPaymentDataFromForm.shippingAddress.locality,
                  region: GPPaymentDataFromForm.shippingAddress.administrativeArea,
                  postalCode: GPPaymentDataFromForm.shippingAddress.postalCode,
                  countryCodeAlpha2: GPPaymentDataFromForm.shippingAddress.countryCode
                },
                shippingPhone: "248-434-5508",
                shippingMethod: "03",
                shippingMethodIndicator: "01",
                productCode: "GEN"
              },
              // Collecting 3DS device data as well.
              collectDeviceData: true
            }, function (verifyError, payload) {
              if (verifyError) {
                console.error(verifyError);
              }
              else {
                new3DSNonce = payload.nonce;
                console.log("New 3DS nonce on client: " + new3DSNonce);
                console.log("Liability shift status: " + payload.liabilityShifted);
                console.log("Liability shift possible status: " + payload.liabilityShiftPossible);

                // Doing some liability shift checking. If liability is shifted, submit the form. Else, try again with a different card.
                // Liability has shifted
                if (payload.liabilityShifted) {
                  console.log("Liability shift flow triggered")
                  socket.emit('nonce-send-to-server', new3DSNonce, function(new3DSNonce) {
                    console.log("Nonce received in client: " + new3DSNonce);
                  });
                }
                // Liability might have shifted, just gonna submit this one too anyway.
                else if (payload.liabilityShiftPossible) {
                  console.log("Liability shift possible flow triggered")
                  socket.emit('nonce-send-to-server', new3DSNonce, function(new3DSNonce) {
                    console.log("Nonce received in client: " + new3DSNonce);
                  });
                }
                // No liability shift. Use another card!
                else {
                  console.log("No liability shift & no liability shift possible flow triggered")
                  alert("Card not able to be authenticated with 3D Secure - please use a different card.");
                  return false;
                }
              }
            })
          });
        });
      }
    });
  });
  }
});
</script>