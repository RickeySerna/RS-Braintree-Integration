<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>

<body>
  <div id="paypalDiv" style="display:none;">
    <form id="paypal-form" action="/paypal-transaction-with-nonce" method="post">

      <div class="container">
        <h1 class="display-4" style="color: #E66C2C;">Thanks for choosing our business today!</h1>
        <p class="lead subtitle" style="color: #E66C2C;">We hope you had a spooky time. Please select the PayPal button below to complete your purchase.</p>
      </div>

      <div class="form-row justify-content-md-center">
        <div class = "col-md-2 mb-3">
          <label class = "PPlabelStyle" for="saveCardCheck">Save your card for future use?</label>
          <input class="form-control PPinputClass" type="checkbox" id="saveCardCheck" name="SaveCard" value="Save">
        </div>
        <div class = "col-md-2 mb-3">
          <label class = "PPlabelStyle" for="Amount">Amount</label>
          <input class="form-control PPinputClass" name="amount" id="amount" placeholder="99.99" required>
        </div>
      </div>

      <div class="paypal-container">
        <div id="paypal-button"></div>
      </div>

      <div class="paypal-container">
        <div id="paypal-button2"></div>
      </div>

      <!-- Hidden input for the nonce. -->
      <div>
        <input type="hidden" id='payment-method-nonce' name="PayPalNonce">
      </div>

      <!-- Hidden inputs for the payment data, one for the shipping address object and one for the billing address object. -->
      <div>
        <input id='pp-payment-data' name = 'PPPaymentData' type='hidden' />
      </div>

      <!-- Hidden input for the device data string. -->
      <div>
        <input id='pp-device-data' name = 'PPDeviceData' type='hidden' />
      </div>

    </form>
  </div>

</body>

<script>
var clientToken = '{{{clientToken}}}';
var form = document.querySelector('#paypal-form');
var nonce = document.querySelector('#payment-method-nonce');
var PPPaymentData = document.querySelector('#pp-payment-data');
var deviceDataString = document.querySelector('#pp-device-data');
console.log("Client token in PayPal: " + clientToken);

function inputValidation() {
  let amountInputted = document.forms["paypal-form"]["amount"].value;
  let saveCardCheckboxBool = document.forms["paypal-form"]["saveCardCheck"].checked;

    // Giving the customer the option to save their card or not. If checked, the form is sent to the usual /transaction location. If not, changing the destination of the form to a POST that just uses the nonce in a sale call directly.
  if (saveCardCheckboxBool == false) {
    // The box is not checked, the customer doesn't want their card saved, submit the form to a checkout that just uses the nonce in a sale call.
    console.log("nope, it's not checked");
    document.forms["paypal-form"].action = "/paypal-transaction-with-nonce";
  } else {
    // The box is checked, customer wants their card saved, submit the form to our original function which creates a token, then a txn from that token.
    console.log("yep, it's checked")
    document.forms["paypal-form"].action = "/apple-pay-transaction-with-token";
  }

  let formDestination = document.forms["paypal-form"].action;
  console.log("Form action: " + formDestination);

  // Making sure the input is actually a number. The second condition is somewat redundant because the field is required, but just in case.
  if (isNaN(amountInputted) || amountInputted == "") {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a number.");
    return false;
  }
  // Making sure the number is positive and not 0.
  else if (((Number(amountInputted) * -1) > 0) || (Number(amountInputted) * Number(amountInputted) == 0)) {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a positive number.");
    return false;
  }
  else {
    return true;
  }
}

braintree.client.create({
  authorization: clientToken
}, function (clientErr, clientInstance) {
  if (clientErr) {
    console.error('Error creating client:', clientErr);
    return;
  }

  // Create a PayPal Checkout component.
  braintree.paypalCheckout.create({
    client: clientInstance
  }, function (paypalCheckoutErr, paypalCheckoutInstance) {
    // Stop if there was a problem creating PayPal Checkout.
    // This could happen if there was a network error or if it's incorrectly configured.
    if (paypalCheckoutErr) {
      console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
      return;
    }
    // Render the div holding the PayPal checkout form once we can load the SDK successfully.
    document.getElementById("paypalDiv").style.display = "inline";

    // Load the PayPal JS SDK (see Load the PayPal JS SDK section)
    paypalCheckoutInstance.loadPayPalSDK({
      // The PayPal script is now loaded on the page and
      // window.paypal.Buttons is now available to use

      // render the PayPal button (see Render the PayPal Button section)
      currency: "USD",
      intent: "capture"
    }, function () {
      paypal.Buttons({
        fundingSource: paypal.FUNDING.PAYPAL,
        createOrder: function () {

          var inputChecker = inputValidation();
          console.log("Input verified value: " + inputChecker);

          // inputValidation() will return false if the amount value is bad, just returning and ending this there if so.
          if (inputChecker == false) {
            return;
          }
          else {
            // inputValidation() was passed, now grab the amount passed to be used in the createPayment() call.
            var amountFromForm = Number(document.forms["paypal-form"]["amount"].value).toFixed(2);
            console.log(amountFromForm);
            
            return paypalCheckoutInstance.createPayment({
              flow: 'checkout',
              amount: amountFromForm,
              currency: 'USD',
              intent: 'capture',
              enableShippingAddress: true,
              shippingAddressEditable: true
            });
          }
        },

        /*onShippingChange: function (data, actions) {
          // Perform some validation or calculation logic on 'data'

          var internationalShippingCharge = 20.00;
          var amountFromForm = Number(document.forms["paypal-form"]["amount"].value).toFixed(2);

          if (data.shippingAddress.country !== 'US') {
            // If the shipping address is not in the US, add the international shipping charge.
            amountFromForm = (Number(amountFromForm) + internationalShippingCharge).toFixed(2);

            return paypalCheckoutInstance.updatePayment({
              amount: amountFromForm,
              currency: 'USD',
              paymentId: data.paymentId,
            }).then(function() {
              return actions.resolve();
            });
          }

          // If the shipping address is in the US, just resolve the promise without updating the payment.
          return actions.resolve();
        },*/

        // Triggered when the user successfully completes the PayPal checkout.
        onApprove: function (data, actions) {
          return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
            // Here's our nonce!
            console.log("PayPal nonce: " + payload.nonce);
            console.log("PayPal object: ", payload);

            // Adding it to the form as well as the entire payment data object to the form.
            // That object contains all of the customer/address information passed in the PayPal form, that info will be used in the server.
            nonce.value = payload.nonce;
            PPPaymentData.value = JSON.stringify(payload);
            form.submit();
          });
        },

        // Triggered when the user opens the PayPal checkout, but closes the window without completing it.
        onCancel: function (data) {
          console.log("PayPal pop-up closed: ", JSON.stringify(data, 0, 2));
        },

        // Triggered when there is an error with the PayPal checkout.
        onError: function (err) {
          console.error("PayPal error: ", err);
        }

        }).render('#paypal-button').then(function () {
        // The PayPal button will be rendered in an html element with the ID
        // 'paypal-button'. This function will be called when the PayPal button
        // is set up and ready to be used
      });

      // Instead of doing the namespace stuff, just using a second .Buttons() call.
      paypal.Buttons({
        fundingSource: paypal.FUNDING.PAYPAL,
        createOrder: function () {

          var inputChecker = inputValidation();
          console.log("Input verified value: " + inputChecker);

          // inputValidation() will return false if the amount value is bad, just returning and ending this there if so.
          if (inputChecker == false) {
            return;
          }
          else {
            // inputValidation() was passed, now grab the amount passed to be used in the createPayment() call.
            var amountFromForm = Number(document.forms["paypal-form"]["amount"].value).toFixed(2);
            console.log(amountFromForm);
            
            return paypalCheckoutInstance.createPayment({
              flow: 'checkout',
              amount: amountFromForm,
              currency: 'USD',
              intent: 'capture',
              enableShippingAddress: true,
              shippingAddressEditable: true
            });
          }
        },

        /*onShippingChange: function (data, actions) {
          // Perform some validation or calculation logic on 'data'

          var internationalShippingCharge = 20.00;
          var amountFromForm = Number(document.forms["paypal-form"]["amount"].value).toFixed(2);

          if (data.shippingAddress.country !== 'US') {
            // If the shipping address is not in the US, add the international shipping charge.
            amountFromForm = (Number(amountFromForm) + internationalShippingCharge).toFixed(2);

            return paypalCheckoutInstance.updatePayment({
              amount: amountFromForm,
              currency: 'USD',
              paymentId: data.paymentId,
            }).then(function() {
              return actions.resolve();
            });
          }

          // If the shipping address is in the US, just resolve the promise without updating the payment.
          return actions.resolve();
        },*/

        // Triggered when the user successfully completes the PayPal checkout.
        onApprove: function (data, actions) {
          return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
            // Here's our nonce!
            console.log("PayPal nonce: " + payload.nonce);
            console.log("PayPal object: ", payload);

            // Adding it to the form as well as the entire payment data object to the form.
            // That object contains all of the customer/address information passed in the PayPal form, that info will be used in the server.
            nonce.value = payload.nonce;
            PPPaymentData.value = JSON.stringify(payload);
            form.submit();
          });
        },

        // Triggered when the user opens the PayPal checkout, but closes the window without completing it.
        onCancel: function (data) {
          console.log("PayPal pop-up closed: ", JSON.stringify(data, 0, 2));
        },

        // Triggered when there is an error with the PayPal checkout.
        onError: function (err) {
          console.error("PayPal error: ", err);
        }

        // This one renders to the other PayPal button div we created.
        }).render('#paypal-button2').then(function () {
        // The PayPal button will be rendered in an html element with the ID
        // 'paypal-button'. This function will be called when the PayPal button
        // is set up and ready to be used
      });
    });
  });

  // Creating the data collector instance to pass device data into PayPal txns.
  braintree.dataCollector.create({
    client: clientInstance
  }, function (err, dataCollectorInstance) {
    if (err) {
      console.error(err);
      return;
    }
    var deviceData = dataCollectorInstance.deviceData;
    console.log("Device data: ", deviceData);
    deviceDataString.value = deviceData;
  });
});
</script>