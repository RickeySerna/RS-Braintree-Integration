<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>

<body>
  <div id="paypalDiv" style="display:none;">
    <form id="paypal-form" action="/paypal-transaction-with-nonce" method="post">

      <div class="container">
        <h1 class="display-4" style="color: #E66C2C;">Thanks for choosing our business today!</h1>
        <p class="lead subtitle" style="color: #E66C2C;">We hope you had a spooky time. Please select the PayPal button below to complete your purchase.</p>
      </div>

      <div class="form-row justify-content-md-center">
        <div class = "col-md-2 mb-3">
          <label class = "PPlabelStyle" for="saveCardCheck">Save your card for future use?</label>
          <input class="form-control PPinputClass" type="checkbox" id="saveCardCheck" name="SaveCard" value="Save">
        </div>
        <div class = "col-md-2 mb-3">
          <label class = "PPlabelStyle" for="Amount">Amount</label>
          <input class="form-control PPinputClass" name="amount" id="amount" placeholder="99.99" required>
        </div>
      </div>

      <div class="paypal-container">
        <div id="paypal-button"></div>
      </div>

      <!-- Hidden input for the nonce. -->
      <div>
        <input type="hidden" id='payment-method-nonce' name="PayPalNonce">
      </div>

      <!-- Hidden inputs for the payment data, one for the shipping address object and one for the billing address object. -->
      <div>
        <input id='ap-payment-shipping-data' name = 'APPaymentShippingData' type='hidden' />
      </div>

      <div>
        <input id='ap-payment-billing-data' name = 'APPaymentBillingData' type='hidden' />
      </div>

      <!-- Hidden input for the device data string. -->
      <div>
        <input id='pp-device-data' name = 'PPDeviceData' type='hidden' />
      </div>

    </form>
  </div>

</body>

<script>
var clientToken = '{{{clientToken}}}';
var form = document.querySelector('#paypal-form');
var nonce = document.querySelector('#payment-method-nonce');
var APPaymentShippingData = document.querySelector('#ap-payment-shipping-data');
var APPaymentBillingData = document.querySelector("#ap-payment-billing-data");
var deviceDataString = document.querySelector('#pp-device-data');
console.log("Client token in PayPal: " + clientToken);

function inputValidation() {
  let amountInputted = document.forms["paypal-form"]["amount"].value;
  let saveCardCheckboxBool = document.forms["paypal-form"]["saveCardCheck"].checked;

    // Giving the customer the option to save their card or not. If checked, the form is sent to the usual /transaction location. If not, changing the destination of the form to a POST that just uses the nonce in a sale call directly.
  if (saveCardCheckboxBool == false) {
    // The box is not checked, the customer doesn't want their card saved, submit the form to a checkout that just uses the nonce in a sale call.
    console.log("nope, it's not checked");
    document.forms["paypal-form"].action = "/paypal-transaction-with-nonce";
  } else {
    // The box is checked, customer wants their card saved, submit the form to our original function which creates a token, then a txn from that token.
    console.log("yep, it's checked")
    document.forms["paypal-form"].action = "/apple-pay-transaction-with-token";
  }

  let formDestination = document.forms["paypal-form"].action;
  console.log("Form action: " + formDestination);

  // Making sure the input is actually a number. The second condition is somewat redundant because the field is required, but just in case.
  if (isNaN(amountInputted) || amountInputted == "") {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a number.");
    return false;
  }
  // Making sure the number is positive and not 0.
  else if (((Number(amountInputted) * -1) > 0) || (Number(amountInputted) * Number(amountInputted) == 0)) {
    console.log("Amount field value: " + amountInputted);
    alert("Please enter a positive number.");
    return false;
  }
  else {
    return true;
  }
}

braintree.client.create({
  authorization: clientToken
}, function (clientErr, clientInstance) {
  if (clientErr) {
    console.error('Error creating client:', clientErr);
    return;
  }

  // Create a PayPal Checkout component.
  braintree.paypalCheckout.create({
    client: clientInstance
  }, function (paypalCheckoutErr, paypalCheckoutInstance) {
    // Stop if there was a problem creating PayPal Checkout.
    // This could happen if there was a network error or if it's incorrectly configured.
    if (paypalCheckoutErr) {
      console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
      return;
    }
    // Render the div holding the PayPal checkout form once we can load the SDK successfully.
    document.getElementById("paypalDiv").style.display = "inline";

/*    var inputChecker = inputValidation();
    console.log("Input verified value: " + inputChecker);

    // inputValidation() will return false if the amount value is bad, just returning and ending this there if so.
    if (inputChecker == false) {
      return;
    }
    else {*/
      // Load the PayPal JS SDK (see Load the PayPal JS SDK section)

      paypalCheckoutInstance.loadPayPalSDK({
        // The PayPal script is now loaded on the page and
        // window.paypal.Buttons is now available to use

        // render the PayPal button (see Render the PayPal Button section)
        currency: "USD",
        intent: "capture"
      }, function () {
        paypal.Buttons({
          fundingSource: paypal.FUNDING.PAYPAL,

          createOrder: function () {

            var amountFromForm = Number(document.forms["paypal-form"]["amount"].value).toFixed(2);
            console.log(amountFromForm);
            
            return paypalCheckoutInstance.createPayment({
              flow: 'checkout', // Required
              amount: amountFromForm, // Required
              currency: 'USD', // Required, must match the currency passed in with loadPayPalSDK

              intent: 'capture', // Must match the intent passed in with loadPayPalSDK

              enableShippingAddress: true,
              shippingAddressEditable: false,
              shippingAddressOverride: {
                recipientName: 'Scruff McGruff',
                line1: '1234 Main St.',
                line2: 'Unit 1',
                city: 'Chicago',
                countryCode: 'US',
                postalCode: '60652',
                state: 'IL',
                phone: '123.456.7890'
              }
            });
          },

          /*onShippingChange: function (data, actions) {
            // Perform some validation or calculation logic on 'data'

            if ( /* need to update shipping options or lineItems *//* ) {
              return paypalCheckoutInstance.updatePayment({
                amount: 10.00,              // Required
                currency: 'USD',
                lineItems: [...],           // Required
                paymentId: data.paymentId,  // Required
                shippingOptions: [...],     // Optional       
              });
            }
            else if (/* address not supported *///) {
  /*            return actions.reject();
            }

            return actions.resolve();
          },*/

          onApprove: function (data, actions) {
            return paypalCheckoutInstance.tokenizePayment(data, function (err, payload) {
              // Here's our nonce! Adding it to the form and submitting the form to the server.
              console.log("PayPal nonce: " + payload.nonce);
              nonce.value = payload.nonce;
              form.submit();
            });
          },

          onCancel: function (data) {
            console.log('PayPal payment cancelled', JSON.stringify(data, 0, 2));
          },

          onError: function (err) {
            console.error('PayPal error', err);
          }
          }).render('#paypal-button').then(function () {
          // The PayPal button will be rendered in an html element with the ID
          // 'paypal-button'. This function will be called when the PayPal button
          // is set up and ready to be used
        });
      });
//    }
  });

  // Creating the data collector instance to pass device data into Apple Pay txns.
  braintree.dataCollector.create({
    client: clientInstance
  }, function (err, dataCollectorInstance) {
    if (err) {
      console.error(err);
      return;
    }
    var deviceData = dataCollectorInstance.deviceData;
    console.log("Device data: ", deviceData);
    deviceDataString.value = deviceData;
  });
});

// Button event listener, you have to place the var session = new ApplePaySession() inside this listener or else you'll get an error!
document.getElementById("paypal-button").addEventListener("click", function(e){
  // Prevent form from submitting before buyer goes through Apple Pay authorization
  e.preventDefault();
});
</script>