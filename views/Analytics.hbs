<head>
</head>

<body>
    <div class="graphStyle">
        <canvas id="transaction-chart"></canvas>
    </div>
    <!-- Creating divs for the checkbox options; one for transaction type, one for transaction status. -->
    <div id="transaction-types">
        <!-- Checkbox options for transaction types will added here dynamically. -->
    </div>
    <div id="transaction-statuses">
        <!-- Checkbox options for transaction statuses will be added here dynamically. -->
    </div>
 
    <script>
        $.ajax({
            url: '/transactionDataForAnalytics',
            type: 'GET',
            dataType: 'json',
            success: function(response) {
                console.log("Date array: ", response.createdAt);
                console.log("Amount array: ", response.amounts);
                console.log("ID array: ", response.ids);
                console.log("Status array: ", response.statuses);
                console.log("Type array: ", response.types);

                // These lines are creating arrays from the types and statuses arrays, but only with the unique values.
                // A Set is an object that only allows unique values. So new Set(response.xxx) is creating Sets from those arrays and those sets inherently only contain the unique values in the array.
                // The ... is the spread operator. It sort of "breaks down" an iterable that's passed into it's individual parts.
                // So it's passed a set containing unique types/statuses and it pulls out those unique types/statuses.
                // Then this is all wrapped in [] so it's creating an array from those types/statuses that ... pulled out of the Set.
                var transactionTypes = [...new Set(response.types)];
                var transactionStatuses = [...new Set(response.statuses)];

                // Checking that the arrays are accurate.
                console.log("Transaction types array: ", transactionTypes);
                console.log("Transaction statuses array: ", transactionStatuses);

                // Add checkboxes for each transaction type
                transactionTypes.forEach(function(type) {
                    $('#transaction-types').append('<input type="checkbox" checked value="' + type + '">' + type + '<br>');
                });

                // Add checkboxes for each transaction status
                transactionStatuses.forEach(function(status) {
                    $('#transaction-statuses').append('<input type="checkbox" checked value="' + status + '">' + status + '<br>');
                });

                // Declare the chart variable outside the drawChart function
                var transactionChart;

                // Function to draw the chart
                function drawChart() {
                    // Destroy the existing chart if it exists
                    if (transactionChart) {
                        transactionChart.destroy();
                    }

                    var selectedTypes = $('#transaction-types input:checked').map(function() {
                        return this.value;
                    }).get();

                    var selectedStatuses = $('#transaction-statuses input:checked').map(function() {
                        return this.value;
                    }).get();

                    var filteredDates = response.createdAt.filter(function(_, i) {
                        return selectedTypes.includes(response.types[i]) && selectedStatuses.includes(response.statuses[i]);
                    });

                    var filteredAmounts = response.amounts.filter(function(_, i) {
                        return selectedTypes.includes(response.types[i]) && selectedStatuses.includes(response.statuses[i]);
                    });

                    var ctx = document.getElementById('transaction-chart');
                    transactionChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: filteredDates.reverse(),
                            datasets: [{
                                label: 'Transaction Amounts',
                                data: filteredAmounts.reverse(),
                                backgroundColor: 'white',
                                borderColor: '#FF8E51',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                }

                // Draw the chart initially
                drawChart();

                // Redraw the chart whenever a checkbox is checked or unchecked
                $('#transaction-types input, #transaction-statuses input').change(drawChart);
            },
            error: function(jqXHR, status, error) {
                console.log('AJAX call failed.');
                console.log('Status: ' + status);
                console.log('Error: ' + error);
            }
        });
    </script>
</body>